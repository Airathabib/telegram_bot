import { Telegraf } from 'telegraf';
import { Mistral } from '@mistralai/mistralai';
import 'dotenv/config';

// === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
const TELEGRAM_BOT_TOKEN =
  process.env.TELEGRAM_BOT_TOKEN ||
  '8038560685:AAGOXKqpzr8BfWroxaTX3j-ar_bxZ7-BY90';
const MISTRAL_API_KEY =
  process.env.MISTRAL_API_KEY || 'C7PBgnTAPUdqpIwjUtlQZar8H5zljW1b';
// === –¢–∏–ø—ã –∏–∑ Mistral SDK (–æ–±—ä—è–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤) ===
interface TextChunk {
  type: 'text';
  text: string;
}

interface ToolFileChunk {
  type: 'tool_file';
  tool: string;
  fileId: string; // –í–∞–∂–Ω–æ: Mistral –∏—Å–ø–æ–ª—å–∑—É–µ—Ç `fileId`, –∞ –Ω–µ `file_id`
  fileName: string;
  fileType: string;
}

type MessageOutputContent = TextChunk | ToolFileChunk;

interface MessageOutputEntry {
  type: 'message.output';
  content: MessageOutputContent[];
}

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ ===
const mistralClient = new Mistral({ apiKey: MISTRAL_API_KEY });
const bot = new Telegraf(TELEGRAM_BOT_TOKEN);

// === –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
interface UserState {
  generatingImage: boolean;
}
const userStates = new Map<number, UserState>();

// === –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ ===
bot.command('start', (ctx) => {
  ctx.replyWithMarkdown(
    'üëã –ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.\n\n' +
      'üîπ `/text <–≤–∞—à –∑–∞–ø—Ä–æ—Å>` ‚Äî —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç\n' +
      'üîπ `/image <–≤–∞—à –∑–∞–ø—Ä–æ—Å>` ‚Äî —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n' +
      'üîπ `–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-—Ç–æ` ‚Äî –ø–æ–ª—É—á–∏—Ç–µ —Ç–µ–∫—Å—Ç + –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n' +
      'üîπ `/help` ‚Äî –ø–æ–º–æ—â—å'
  );
});

bot.command('help', (ctx) => {
  ctx.reply('–ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–π –∑–∞–ø—Ä–æ—Å, –∏ —è —Å–æ–∑–¥–∞–º —Ç–µ–∫—Å—Ç –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤–∞—Å!');
});

// === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Mistral Medium + image_generation ===
async function generateImage(ctx: any, imagePrompt: string) {
  await ctx.reply('üñºÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...');

  try {
    // –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const imageAgent = await mistralClient.beta.agents.create({
      model: 'mistral-medium-2505',
      name: 'Image Generation Agent',
      description: 'Agent used to generate images.',
      instructions:
        'Use the image generation tool when you have to create images.',
      tools: [{ type: 'image_generation' }],
      completionArgs: {
        temperature: 0.3,
        topP: 0.95,
      },
    });

    // –ó–∞–ø—É—Å–∫ –¥–∏–∞–ª–æ–≥–∞
    const conversation = await mistralClient.beta.conversations.start({
      agentId: imageAgent.id,
      inputs: imagePrompt,
    });

    console.log('Raw conversation output:', conversation.outputs); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

    // –ü–æ–∏—Å–∫ message.output
    const imageOutput = conversation.outputs.find(
      (output): output is any => output.type === 'message.output'
    );

    if (!imageOutput) {
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.');
      return;
    }

    // –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const fileEntry = imageOutput.content.find(
      (item: { type: string }): item is any => item.type === 'tool_file'
    );

    if (!fileEntry) {
      await ctx.reply('‚ùå –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return;
    }

    const fileId = fileEntry.fileId;

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π URL
    const baseUrl = mistralClient['_baseURL']?.toString().replace(/\/$/, '');
    const fileUrl = `${baseUrl}/v1/files/${fileId}/content`;

    const downloadResponse = await fetch(fileUrl, {
      headers: {
        Authorization: `Bearer ${MISTRAL_API_KEY}`,
      },
    });

    if (!downloadResponse.ok) {
      throw new Error('Failed to download file');
    }

    const blob = await downloadResponse.blob();
    const buffer = Buffer.from(await blob.arrayBuffer());

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await ctx.replyWithPhoto(
      { source: buffer },
      {
        caption: 'üñºÔ∏è –í–∞—à–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
      }
    );

    await ctx.reply('‚úÖ –í–∞—à –ø–æ—Å—Ç –≥–æ—Ç–æ–≤!');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.');
  }
}

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ ===
bot.on('text', async (ctx) => {
  const userId = ctx.from.id;
  const prompt = ctx.message.text;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∂–¥—ë–º –ª–∏ –º—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  if (userStates.get(userId)?.generatingImage) {
    await generateImage(ctx, prompt);
    userStates.set(userId, { generatingImage: false });
    return;
  }

  await ctx.reply('üìù –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ–∫—Å—Ç...');

  try {
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
    const textResponse = await mistralClient.chat.complete({
      model: 'mistral-large-latest',
      messages: [{ role: 'user', content: prompt }],
    });

    const generatedText = textResponse.choices[0].message.content;
    await ctx.reply(`‚úçÔ∏è –í–æ—Ç –≤–∞—à —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n${generatedText}`);

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    await ctx.reply(
      'üé® –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫ —ç—Ç–æ–º—É —Ç–µ–∫—Å—Ç—É:'
    );
    userStates.set(userId, { generatingImage: true });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞:', error);
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç.');
  }
});

// === –ö–æ–º–∞–Ω–¥—ã /text –∏ /image ===
bot.command('text', async (ctx) => {
  const promptMatch = ctx.match;
  if (!promptMatch || typeof promptMatch !== 'string') {
    return ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /text');
  }

  const prompt = promptMatch as string;

  await ctx.reply('üìù –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ–∫—Å—Ç...');
  try {
    const response = await mistralClient.chat.complete({
      model: 'mistral-large-latest',
      messages: [{ role: 'user', content: prompt }],
    });

    const content = response.choices[0].message.content;
    await ctx.reply(
      typeof content === 'string' ? content : JSON.stringify(content)
    );
  } catch (error) {
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞.');
  }
});

bot.command('image', async (ctx) => {
  const promptMatch = ctx.match;
  if (!promptMatch || typeof promptMatch !== 'string') {
    return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /image');
  }

  const prompt = promptMatch as string;
  await generateImage(ctx, prompt);
});

// === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
bot.launch();

console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...');
